<?php
/**
 * @file
 * Taglit Fellows Application Module.
 *
 * This module creates an apllication form for the Taglit Fellows website.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function taglit_apply_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "strongarm" && $api == "strongarm") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_views_api().
 */
function taglit_apply_views_api() {
  return array("version" => "3.0");
}

/**
* Implements hook_permission().
*/
function taglit_apply_permission() {
  $permission = array(
    'access application' => array(
      'title' => t('Access Taglit Fellow Application'),
      'description' => t('Allow certain users to access and fill out the Taglit Fellows Program Application'),
    ),
    'administer application' => array(
      'title' => t('Administer Taglit Fellows Application'),
      'description' => t('Allow certain administrators to administer and view the Taglit Fellows Program Applications'),
    ),    
  );
  return $permission;
}

/**
 * Implements hook_menu().
 */
function taglit_apply_menu() {
  $items = array(
    'program-application' => array(
      'title' =>          'Taglit Fellows Application',
      'description' =>    'The front page and status page for the Taglit Fellows Application.',
      'page callback' =>  'taglit_apply_page',
      'file' =>           'taglit_apply.pages.inc',
      'menu_name'       => 'main-menu',
      'access arguments' => array('access application'),
      'type' => MENU_NORMAL_ITEM,
    ),
    'program-application/section-a' => array(
      'title' => 'Taglit Fellows Program Application: Section A',
      'description' => 'Section A Page for Taglit Fellows Program Application.',
      'page callback' => 'taglit_apply_seca_page',
      'file' => 'taglit_apply.pages.inc',
      'access arguments' => array('access application'),
    ),
    'program-application/section-b' => array(
      'title' => 'Taglit Fellows Program Application: Section B',
      'description' => 'Section B Page for Taglit Fellows Program Application.',
      'page callback' => 'taglit_apply_secb_page',
      'file' => 'taglit_apply.pages.inc',
      'access arguments' => array('access application'),
    ),
    'program-application/section-c' => array(
      'title' => 'Taglit Fellows Program Application: Section C',
      'description' => 'Section C Page for Taglit Fellows Program Application.',
      'page callback' => 'taglit_apply_secc_page',
      'file' => 'taglit_apply.pages.inc',
      'access callback' => TRUE,
    ),
    'program-application/section-d' => array(
      'title' => 'Taglit Fellows Program Application: Section D',
      'description' => 'Section D Page for Taglit Fellows Program Application.',
      'page callback' => 'taglit_apply_secd_page',
      'file' => 'taglit_apply.pages.inc',
      'access arguments' => array('access application'),
    ),
    'program-application/section-e' => array(
      'title' => 'Taglit Fellows Program Application: Section E',
      'description' => 'Section E Page for Taglit Fellows Program Application.',
      'page callback' => 'taglit_apply_sece_page',
      'file' => 'taglit_apply.pages.inc',
      'access arguments' => array('access application'),
    ),
    'program-application/section-f' => array(
      'title' => 'Taglit Fellows Program Application: Section F',
      'description' => 'Section F Page for Taglit Fellows Program Application.',
      'page callback' => 'taglit_apply_secf_page',
      'file' => 'taglit_apply.pages.inc',
      'access arguments' => array('access application'),
    ),
    'program-application/section-g' => array(
      'title' => 'Taglit Fellows Program Application: Section G',
      'description' => 'Section G Page for Taglit Fellows Program Application.',
      'page callback' => 'taglit_apply_secg_page',
      'file' => 'taglit_apply.pages.inc',
      'access arguments' => array('access application'),
    ),
    'user/%user/application' => array(
      'access callback'  => 'taglit_apply_user_page_access',
      'description'       => "View a specific user's application.",
      'file'              => 'taglit_apply.pages.inc',
      'page callback'     => 'taglit_apply_user_page',
      'page arguments'    => array(1),
      'title'             => 'My Application',
      'type'              => MENU_LOCAL_TASK,
    ),
    'program-application/%user' => array(
      'description'       => "View a specific user's application.",
      'file'              => 'taglit_apply.pages.inc',
      'page callback'     => 'taglit_apply_user_page',
      'page arguments'    => array(1),
      'title'             => 'Program Application',
      'access arguments' => array('administer application')
    ),

  );
  return $items;
}
/**
 * Implements hook_menu_alter().
 */

function taglit_apply_menu_alter(&$items) {
  $items['user/register']['title'] = 'Start an Application';
  $items['user/register']['weight'] = -99;
  $items['user/%user/edit']['title'] = 'Edit Profile';
  $items['user/%user']['title'] = 'View Profile';
  
  return $items;
}

/**
 * Implements hook_form_alter().
 */

function taglit_apply_form_alter(&$form, &$form_state, $form_id){
  global $user;
    if (user_is_anonymous()) { 
      switch($form_id) {  
        case 'user_register_form':  //user registration form
        $form['explanation-text'] = array(
          '#type' => 'markup',
          '#markup' => '<p>' . t('To begin your application, fill out the
            form below. After you submit the form, you will receive an email with a confirmation link
            that will allow you to continue the application.') . '</p>',
          '#weight' => '-50',
        );
        $form['actions']['submit']['#value'] = 'Start Your Application';
        break;
    }
  }
}    

function taglit_apply_user_page_access() {
  global $user;
  if (arg(0) == 'user' && $user->uid == arg(1) || in_array('administrator', array_values($user->roles))){
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function taglit_apply_seca_form($form, $form_state) {
  global $user; //Get the current user.
  
  taglit_apply_check_app_exists($user);
  
  $query_select = db_select('taglit_apply') //Query the database to see of the user has a record.
  ->fields('taglit_apply')
  ->condition('uid', $user->uid, '=')
  ->execute()
  ->fetchAssoc();
  
  if ($query_select['country'] != 'Canada' && $query_select['country'] != 'United States' && $query_select['country'] != 'Israel') {
	  $country = 'Other';
	  $country_other = $query_select['country'];
  }
  else {
	  $country = $query_select['country'];
	  $country_other = NULL;
  }
    
  $us_states = array(
		'AL'=>"Alabama",
    'AK'=>"Alaska", 
    'AZ'=>"Arizona", 
    'AR'=>"Arkansas", 
    'CA'=>"California", 
    'CO'=>"Colorado", 
    'CT'=>"Connecticut", 
    'DE'=>"Delaware", 
    'DC'=>"District Of Columbia", 
    'FL'=>"Florida", 
    'GA'=>"Georgia", 
    'HI'=>"Hawaii", 
    'ID'=>"Idaho", 
    'IL'=>"Illinois", 
    'IN'=>"Indiana", 
    'IA'=>"Iowa", 
    'KS'=>"Kansas", 
    'KY'=>"Kentucky", 
    'LA'=>"Louisiana", 
    'ME'=>"Maine", 
    'MD'=>"Maryland", 
    'MA'=>"Massachusetts", 
    'MI'=>"Michigan", 
    'MN'=>"Minnesota", 
    'MS'=>"Mississippi", 
    'MO'=>"Missouri", 
    'MT'=>"Montana",
    'NE'=>"Nebraska",
    'NV'=>"Nevada",
    'NH'=>"New Hampshire",
    'NJ'=>"New Jersey",
    'NM'=>"New Mexico",
    'NY'=>"New York",
    'NC'=>"North Carolina",
    'ND'=>"North Dakota",
    'OH'=>"Ohio", 
    'OK'=>"Oklahoma", 
    'OR'=>"Oregon", 
    'PA'=>"Pennsylvania", 
    'RI'=>"Rhode Island", 
    'SC'=>"South Carolina", 
    'SD'=>"South Dakota",
    'TN'=>"Tennessee", 
    'TX'=>"Texas", 
    'UT'=>"Utah", 
    'VT'=>"Vermont", 
    'VA'=>"Virginia", 
    'WA'=>"Washington", 
    'WV'=>"West Virginia", 
    'WI'=>"Wisconsin", 
    'WY'=>"Wyoming"
    );
    
    $canadian_states = array( 
    "BC"=>"British Columbia", 
    "ON"=>"Ontario", 
    "NL"=>"Newfoundland and Labrador", 
    "NS"=>"Nova Scotia", 
    "PE"=>"Prince Edward Island", 
    "NB"=>"New Brunswick", 
    "QC"=>"Quebec", 
    "MB"=>"Manitoba", 
    "SK"=>"Saskatchewan", 
    "AB"=>"Alberta", 
    "NT"=>"Northwest Territories", 
    "NU"=>"Nunavut",
    "YT"=>"Yukon Territory"
    );
    
    $timestamp = strtotime($query_select['birth_date']);
    $birth_date = array(
    	'year' => date('Y', $timestamp),
    	'month' => date('n', $timestamp),
    	'day' => date('j', $timestamp),
    );

  $form = array();
  
  $form['address'] = array(
    '#type' => 'textfield',
    '#title' => t('Street Address'),
    '#size' => 100,
		'#maxlength' => 200,
    '#required' => TRUE,
    '#default_value' => $query_select['street_address'],
  );
  $form['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#size' => 50,
		'#maxlength' => 100,
    '#required' => TRUE,
    '#default_value' => $query_select['city'],
  );
  $form['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#required' => TRUE,
    '#options' => array(
      'United States' => t('United States'),
      'Canada' => t('Canada'),
      'Israel' => t('Israel'),
      'Other' => t('Other'),
    ),
    '#default_value' => $country,
  );
  $form['country-other'] = array(
    '#type' => 'textfield',
    '#title' => t('Country Name'),
    '#size' => 50,
		'#maxlength' => 100,
    '#default_value' => $country_other,
    '#states' => array(
	    'visible' => array(  // Action to take: Make visible.
	      ':input[name="country"]' => array('value' => t('Other')),
	    ),
	  ),
  );
  $form['state-us'] = array(
    '#type' => 'select',
    '#title' => t('State'),
    '#options' => $us_states,
    '#default_value' => $query_select['state'],
    '#states' => array(
	    'visible' => array(  // Action to take: Make visible.
	      ':input[name="country"]' => array('value' => t('United States')),
	    ),
	  ),
  );
  $form['state-can'] = array(
    '#type' => 'select',
    '#title' => t('State'),
    '#options' => $canadian_states,
    '#default_value' => $query_select['state'],
    '#states' => array(
	    'visible' => array(  // Action to take: Make visible.
	      ':input[name="country"]' => array('value' => t('Canada')),
	    ),
	  ),
  );  
 $form['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip Code'),
    '#size' => 10,
		'#maxlength' => 10,
    '#default_value' => $query_select['zip'],
  );
 $form['gender'] = array(
    '#type' => 'radios',
    '#title' => t('Gender'),
    '#options' => array(
      'M' => t('Male'),
      'F' => t('Female'),
      'O' => t('Other'),
    ),
    '#required' => TRUE,
    '#default_value' => $query_select['gender'],
  );
 $form['birth-date'] = array(
    '#type' => 'date',
    '#title' => t('Birthdate'),
    '#required' => TRUE,
    '#default_value' => $birth_date,
  );

 $form['us-citizen'] = array(
    '#type' => 'radios',
    '#title' => t('I am a citizen of the United States'),
    '#options' => array(
      '1' => t('Yes'),
      '0' => t('No'),
    ),
    '#required' => TRUE,
    '#default_value' => $query_select['us_citizen'],
  );
  $form['citizen-other'] = array(
    '#type' => 'textfield',
    '#title' => t('Country of Citizenship'),
    '#size' => 50,
		'#maxlength' => 100,
    '#default_value' => $query_select['citizen_other'],
    '#states' => array(
	    'visible' => array(  // Action to take: Make visible.
	      ':input[name="us-citizen"]' => array('value' => t('0')),
	    ),
	  ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

function taglit_apply_seca_form_submit($form, &$form_state) {
	global $user;
	  
  if (isset($form_state['values']['state-us'])) {
	  $state = $form_state['values']['state-us'];
  }
  elseif (isset($form_state['values']['state-can'])) {
	  $state = $form_state['values']['state-can'];
  }
  else {
	  $state = NULL;
  }
  
  if ($form_state['values']['us-citizen'] == 0) {
	  $citizen_other = $form_state['values']['citizen-other'];
  }
  else {
	  $citizen_other = NULL;
  }
  
  if ($form_state['values']['country'] == 'Other') {
	  $country = $form_state['values']['country-other'];
  }
  else {
	  $country = $form_state['values']['country'];
  }
    
  $query = db_update('taglit_apply')
  	->fields(
  		array(
	    	'street_address' 	=> 	$form_state['values']['address'],
				'city' 	=> $form_state['values']['city'],
				'country' => $country,
				'state' => $state,
				'zip' 	=> $form_state['values']['zip'],
				'gender' 	=> $form_state['values']['gender'],
				'birth_date' 	=> $form_state['values']['birth-date']['year'] . 
					'-' . $form_state['values']['birth-date']['month'] . 
					'-' .  $form_state['values']['birth-date']['day'],
				'us_citizen' 	=> $form_state['values']['us-citizen'],
				'citizen_other' => $citizen_other,
				'seca_complete' => 1
			)
		)
  ->condition('uid', $user->uid, '=')
  ->execute();
  
  $form_state['redirect'] = 'program-application';
}

function taglit_apply_secb_form($form, $form_state) {
  global $user; //Get the current user.
	
	taglit_apply_check_app_exists($user);
	
  $query_select = db_select('taglit_apply') //Query the database to see of the user has a record.
	  ->fields('taglit_apply')
	  ->condition('uid', $user->uid, '=')
	  ->execute()
	  ->fetchAssoc();  
  
  $education_school = unserialize($query_select['education_school']);
  $education_date = unserialize($query_select['education_date']);
  $education_location = unserialize($query_select['education_location']);
  $education_degree = unserialize($query_select['education_degree']);
 
  $count_array = count($education_school);
  if ($count_array == 0) {
    $count_array++;
  }

  $form = array(); //Build the form.
  
  if (empty($form_state['num_items'])) {
    $form_state['num_items'] = $count_array;
  }

  // Build the number of name fieldsets indicated by $form_state['num_names']
  for ($i = 1; $i <= $form_state['num_items']; $i++) {
    $form['school'][$i] = array(
      '#type' => 'fieldset',
      '#title' => t('School #@num', array('@num' => $i)),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
    );

    $form['school'][$i]['education_school'] = array(
      '#type' => 'textfield',
      '#title' => t('Name of School'),
      '#size' => 100,
      '#maxlength' => 250,
      '#required' => TRUE,
      '#default_value' => isset($education_school[$i]) ? $education_school[$i] : NULL,
      );
    $form['school'][$i]['education_location'] = array(
      '#type' => 'textfield',
      '#title' => t('City/State'),
      '#size' => 100,
      '#maxlength' => 250,
      '#required' => TRUE,
      '#default_value' => isset($education_location[$i]) ? $education_location[$i] : NULL,
    );
    $form['school'][$i]['education_date'] = array(
      '#title' => t("Dates Attended"),
      '#type' => 'textfield',
      '#size' => 100,
      '#maxlength' => 250,
      '#required' => TRUE,
      '#default_value' => isset($education_date[$i]) ? $education_date[$i] : NULL,      
    );
    $form['school'][$i]['education_degree'] = array(
      '#type' => 'textfield',
      '#title' => t('Degree Earned'),
      '#size' => 100,
      '#maxlength' => 250,
      '#required' => TRUE,
      '#default_value' => isset($education_degree[$i]) ? $education_degree[$i] : NULL,      
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  // Adds "Add another program" button
  $form['add_school'] = array(
    '#type' => 'submit',
    '#value' => t('Add another school'),
    '#submit' => array('taglit_apply_add_item'),
  );

  // If we have more than one name, this button allows removal of the
  // last name.
  if ($form_state['num_items'] > 1) {
    $form['remove_school'] = array(
      '#type' => 'submit',
      '#value' => t('Remove last school'),
      '#submit' => array('taglit_apply_remove_item'),
      
      // Since we are removing a name, don't validate until later.
      '#limit_validation_errors' => array(),
    );
  }
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

function taglit_apply_secb_form_submit($form, &$form_state) {
   global $user;

  //create arrays for the program fields
  $education_school = array();
  $education_location = array();
  $education_date = array();
  $education_degree = array();
  
  for ($i = 1; $i <= $form_state['num_items']; $i++) {
    $education_school[$i] = $form_state['values'][$i]['education_school'];
    $education_location[$i] = $form_state['values'][$i]['education_location'];
    $education_date[$i] = $form_state['values'][$i]['education_date'];
    $education_degree[$i] = $form_state['values'][$i]['education_degree'];
  }
    
  $query = db_update('taglit_apply')
  ->fields(array(
    'education_school' => serialize($education_school),
    'education_location' => serialize($education_location),
    'education_date' => serialize($education_date),
    'education_degree' => serialize($education_degree),
    'secb_complete' => 1
  ))
  ->condition('uid', $user->uid, '=')
  ->execute();
  $form_state['redirect'] = 'program-application';
}

function taglit_apply_secc_form($form, $form_state) {
  global $user; //Get the current user.
	
	taglit_apply_check_app_exists($user);
	
  $query_select = db_select('taglit_apply') //Query the database to see of the user has a record.
	  ->fields('taglit_apply')
	  ->condition('uid', $user->uid, '=')
	  ->execute()
	  ->fetchAssoc();  
  
  $israel_program = unserialize($query_select['israel_program']);
  $israel_date = unserialize($query_select['israel_date']);
  $israel_focus = unserialize($query_select['israel_focus']);
  $israel_role = unserialize($query_select['israel_role']);
 
  $count_array = count($israel_program);
  if ($count_array == 0) {
    $count_array++;
  }

  $form = array(); //Build the form.
  
  if (empty($form_state['num_items'])) {
    $form_state['num_items'] = $count_array;
  }

  // Build the number of name fieldsets indicated by $form_state['num_names']
  for ($i = 1; $i <= $form_state['num_items']; $i++) {
    $form['program'][$i] = array(
      '#type' => 'fieldset',
      '#title' => t('Program #@num', array('@num' => $i)),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
    );

    $form['program'][$i]['israel_program'] = array(
      '#type' => 'textfield',
      '#title' => t('Name of Program'),
      '#size' => 100,
      '#maxlength' => 250,
      '#required' => TRUE,
      '#default_value' => isset($israel_program[$i]) ? $israel_program[$i] : NULL,
      );
    $form['program'][$i]['israel_date'] = array(
      '#type' => 'textfield',
      '#title' => t('Date'),
      '#size' => 100,
      '#maxlength' => 250,
      '#required' => TRUE,
      '#default_value' => isset($israel_date[$i]) ? $israel_date[$i] : NULL,
    );
    $form['program'][$i]['israel_focus'] = array(
      '#title' => t('Focus of Program'),
      '#type' => 'textfield',
      '#size' => 100,
      '#maxlength' => 250,
      '#required' => TRUE,
      '#default_value' => isset($israel_focus[$i]) ? $israel_focus[$i] : NULL,      
    );
    $form['program'][$i]['israel_role'] = array(
      '#type' => 'textfield',
      '#title' => t('Role (Leader/Participant)'),
      '#size' => 100,
      '#maxlength' => 250,
      '#required' => TRUE,
      '#default_value' => isset($israel_role[$i]) ? $israel_role[$i] : NULL,      
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  // Adds "Add another program" button
  $form['add_program'] = array(
    '#type' => 'submit',
    '#value' => t('Add another program'),
    '#submit' => array('taglit_apply_add_item'),
  );

  // If we have more than one name, this button allows removal of the
  // last name.
  if ($form_state['num_items'] > 1) {
    $form['remove_program'] = array(
      '#type' => 'submit',
      '#value' => t('Remove last program'),
      '#submit' => array('taglit_apply_remove_item'),
      
      // Since we are removing a name, don't validate until later.
      '#limit_validation_errors' => array(),
    );
  }
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

function taglit_apply_secc_form_submit($form, &$form_state) {
   global $user;

  //create arrays for the program fields
  $israel_program = array();
  $israel_date = array();
  $israel_focus = array();
  $israel_role = array();
  
  for ($i = 1; $i <= $form_state['num_items']; $i++) {
    $israel_program[$i] = $form_state['values'][$i]['israel_program'];
    $israel_date[$i] = $form_state['values'][$i]['israel_date'];
    $israel_focus[$i] = $form_state['values'][$i]['israel_focus'];
    $israel_role[$i] = $form_state['values'][$i]['israel_role'];
  }
    
  $query = db_update('taglit_apply')
  ->fields(array(
    'israel_program' => serialize($israel_program),
    'israel_date' => serialize($israel_date),
    'israel_focus' => serialize($israel_focus),
    'israel_role' => serialize($israel_role),
    'secc_complete' => 1
  ))
  ->condition('uid', $user->uid, '=')
  ->execute();
  $form_state['redirect'] = 'program-application';
}

function taglit_apply_secd_form($form, $form_state) {
  global $user; //Get the current user.
	
	taglit_apply_check_app_exists($user);
	
  $query_select = db_select('taglit_apply') //Query the database to see of the user has a record.
	  ->fields('taglit_apply')
	  ->condition('uid', $user->uid, '=')
	  ->execute()
	  ->fetchAssoc();  
  
  $curric_program = unserialize($query_select['curric_program']);
  $curric_date = unserialize($query_select['curric_date']);
  $curric_role = unserialize($query_select['curric_role']);
 
  $count_array = count($curric_program);
  if ($count_array == 0) {
    $count_array++;
  }

  $form = array(); //Build the form.
  
  if (empty($form_state['num_items'])) {
    $form_state['num_items'] = $count_array;
  }

  // Build the number of name fieldsets indicated by $form_state['num_names']
  for ($i = 1; $i <= $form_state['num_items']; $i++) {
    $form['program'][$i] = array(
      '#type' => 'fieldset',
      '#title' => t('Program #@num', array('@num' => $i)),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
    );

    $form['program'][$i]['curric_program'] = array(
      '#type' => 'textfield',
      '#title' => t('Program/Project'),
      '#size' => 100,
      '#maxlength' => 250,
      '#required' => TRUE,
      '#default_value' => isset($curric_program[$i]) ? $curric_program[$i] : NULL,
      );
    $form['program'][$i]['curric_date'] = array(
      '#type' => 'textfield',
      '#title' => t('Date'),
      '#size' => 100,
      '#maxlength' => 250,
      '#required' => TRUE,
      '#default_value' => isset($curric_date[$i]) ? $curric_date[$i] : NULL,
    );
    $form['program'][$i]['curric_role'] = array(
      '#type' => 'textfield',
      '#title' => t('Your Role'),
      '#size' => 100,
      '#maxlength' => 250,
      '#required' => TRUE,
      '#default_value' => isset($curric_role[$i]) ? $curric_role[$i] : NULL,      
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  // Adds "Add another program" button
  $form['add_program'] = array(
    '#type' => 'submit',
    '#value' => t('Add another program'),
    '#submit' => array('taglit_apply_add_item'),
  );

  // If we have more than one name, this button allows removal of the
  // last name.
  if ($form_state['num_items'] > 1) {
    $form['remove_program'] = array(
      '#type' => 'submit',
      '#value' => t('Remove last program'),
      '#submit' => array('taglit_apply_remove_item'),
      
      // Since we are removing a name, don't validate until later.
      '#limit_validation_errors' => array(),
    );
  }
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

function taglit_apply_secd_form_submit($form, &$form_state) {
   global $user;

  //create arrays for the program fields
  $curric_program = array();
  $curric_date = array();
  $curric_role = array();
  
  for ($i = 1; $i <= $form_state['num_items']; $i++) {
    $curric_program[$i] = $form_state['values'][$i]['curric_program'];
    $curric_date[$i] = $form_state['values'][$i]['curric_date'];
    $curric_role[$i] = $form_state['values'][$i]['curric_role'];
  }
    
  $query = db_update('taglit_apply')
  ->fields(array(
    'curric_program' => serialize($curric_program),
    'curric_date' => serialize($curric_date),
    'curric_role' => serialize($curric_role),
    'secd_complete' => 1
  ))
  ->condition('uid', $user->uid, '=')
  ->execute();
  $form_state['redirect'] = 'program-application';
}

function taglit_apply_sece_form($form_state) {
	global $user; //Get the current user.
  
  taglit_apply_check_app_exists($user);
  
  $query_select = db_select('taglit_apply') //Query the database to see of the user has a record.
  ->fields('taglit_apply')
  ->condition('uid', $user->uid, '=')
  ->execute()
  ->fetchAssoc();
  
  $form = array();
  if ($query_select['sece_complete'] == 1) {
		$form['uploaded-file'] = array(
	  	'#markup' => '<p><strong>Current File: </strong><a href="http://' . variable_get("file_public_path", conf_path() . "/files/") . $query_select['cv_file_path'] . '">' . $query_select['cv_file_path'] . '</a></p>
	  	<p>If you upload a file below, it will replace this one.</p>',
		);
	}
  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('Upload File'),
    '#description' => t('Upload a file, allowed extensions: doc, docx, txt'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Validate handler for taglit_apply_sece_form().
 */
function taglit_apply_sece_form_validate($form, &$form_state) {
  $file = file_save_upload('file', array(
    'file_validate_extensions' => array('doc docx txt'), // Validate extensions.
  ));
  // If the file passed validation:
  if ($file) {
    // Move the file, into the Drupal file system
    if ($file = file_move($file, 'public://')) {
      // Save the file for use in the submit handler.
      $form_state['storage']['file'] = $file;
    }
    else {
      form_set_error('file', t('Failed to write the uploaded file to the site\'s file folder.'));
    }
  }
  else {
    form_set_error('file', t('No file was uploaded.'));
  }
}

/**
 * Submit handler for taglit_apply_sece_form().
 */
function taglit_apply_sece_form_submit($form, &$form_state) {
  $file = $form_state['storage']['file'];
  // We are done with the file, remove it from storage.
  unset($form_state['storage']['file']);
  // Make the storage of the file permanent
  $file->status = FILE_STATUS_PERMANENT;
  // Save file status.
  file_save($file);
	global $user;
	
  $query = db_update('taglit_apply')
  	->fields(
  		array(
	    	'cv_file_path' 	=> 	$file->filename,
				'sece_complete' => 1
			)
		)
  ->condition('uid', $user->uid, '=')
  ->execute();
  
  $form_state['redirect'] = 'program-application';

}

function taglit_apply_secf_form($form, $form_state) {
  global $user; //Get the current user.
  
  taglit_apply_check_app_exists($user);
  
  $query_select = db_select('taglit_apply') //Query the database to see of the user has a record.
  ->fields('taglit_apply')
  ->condition('uid', $user->uid, '=')
  ->execute()
  ->fetchAssoc();
  
  $form = array();
  
  $form['essay'] = array(
    '#type' => 'text_format',
    '#title' => '<ul><li>' . t('Discuss some of the meanings and usages 
    of the term “Israel education” in contemporary Jewish life.') . 
    '</li><li>' . t('Discuss what you believe to be the central purposes 
    for Israel Education in North American Jewish life today.') . 
    '</li></ul>',
    '#rows' => 25,
    '#default_value' => $query_select['essay'],
    '#format' => 'filtered_html',
  );

  $form['save'] = array(
    '#type' => 'submit',
    '#name' => 'save',
    '#value' => t('Save & Return Later'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#name' => 'submit',
    '#value' => t('Submit'),
  );
  $form['return'] = array(
    '#type' => 'submit',
    '#name' => 'return',
    '#value' => t('Return to Application Page'),
  );  
  return $form;
}

function taglit_apply_secf_form_submit($form, &$form_state) {
	global $user;
  
  if ($form_state['triggering_element']['#name'] == 'submit') {
	  $query = db_update('taglit_apply')
  	->fields(
  		array(
	    	'essay' 	=> 	$form_state['values']['essay']['value'],
				'secf_complete' => 1
			)
		)
  ->condition('uid', $user->uid, '=')
  ->execute();
  
  $form_state['redirect'] = 'program-application';
  }
  elseif ($form_state['triggering_element']['#name'] == 'save') {
		$query = db_update('taglit_apply')
  	->fields(
  		array(
	    	'essay' 	=> 	$form_state['values']['essay']['value'],
				'secf_complete' => 0
			)
		)
  ->condition('uid', $user->uid, '=')
  ->execute();
  
  $form_state['redirect'] = 'program-application';	  
  }
  elseif ($form_state['triggering_element']['#name'] == 'return') {
	  $form_state['redirect'] = 'program-application';
  }
}

function taglit_apply_secg_form($form, $form_state) {
  global $user; //Get the current user.
  
  taglit_apply_check_app_exists($user);
  
  $query_select = db_select('taglit_apply') //Query the database to see of the user has a record.
  ->fields('taglit_apply')
  ->condition('uid', $user->uid, '=')
  ->execute()
  ->fetchAssoc();
  
  $form = array();
  
  $form['declaration'] = array(
    '#type' => 'radios',
    '#title' => t('I agree'),
    '#options' => array(
      '1' => t('Yes'),
      '0' => t('No'),
    ),
    '#required' => TRUE,
    '#default_value' => $query_select['declaration'],
  );
 $form['initials'] = array(
    '#type' => 'textfield',
    '#title' => t('Initials'),
    '#size' => 3,
		'#maxlength' => 3,
    '#default_value' => $query_select['initials'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

function taglit_apply_secg_form_submit($form, &$form_state) {
	global $user;
    
  $query = db_update('taglit_apply')
  	->fields(
  		array(
	    	'declaration' 	=> 	$form_state['values']['declaration'],
	    	'initials' 	=> 	$form_state['values']['initials'],
				'secg_complete' => 1
			)
		)
  ->condition('uid', $user->uid, '=')
  ->execute();
  
  maprogram_add_role_to_user($user, 'applicant');
  
  $form_state['redirect'] = 'program-application';
}


/**
 * Checks if there is a application started for the user. If not,
 * it starts one.
 */
function taglit_apply_check_app_exists($user) {
  $query_select = db_select('taglit_apply') //Query the database to see of the user has a record.
  ->fields('taglit_apply')
  ->condition('uid', $user->uid, '=')
  ->execute()
  ->fetchAssoc();
    
  if (!$query_select) { //insert record if one does not exist.
    $query_insert = db_insert('taglit_apply')
    ->fields(array('uid'))
    ->values(array(
      'uid' => $user->uid )
    )
    ->execute();    
  }
}

/**
 * Adds Items to forms.
 */
function taglit_apply_add_item($form, &$form_state) {
  $form_state['num_items']++;
  $form_state['rebuild'] = TRUE;
}

/**
 *  Removes Items from forms.
 */
function taglit_apply_remove_item($form, &$form_state) {
  if ($form_state['num_items'] > 1) {
    $form_state['num_items']--;
  }
  $form_state['rebuild'] = TRUE;
}

/**
* Add a role to a user.
*
* @param $user
*   User object or user ID.
* @param $role_name
*   String value of role to be added.
*
* @see http_://drupal.org/node/28379#comment-4277052
* @see http_://api.drupal.org/api/drupal/modules--user--user.module/function/user_save
*/
function maprogram_add_role_to_user($user, $role_name) {
  // For convenience, we'll allow user ids as well as full user objects.
  if (is_numeric($user)) {
    $user = user_load($user);
  }
  // If the user doesn't already have the role, add the role to that user.
  $key = array_search($role_name, $user->roles);
  if ($key == FALSE) {
    // Get the rid from the roles table.
    $roles = user_roles(TRUE);
    $rid = array_search($role_name, $roles);
    if ($rid != FALSE) {
      $new_role[$rid] = $role_name;
      $all_roles = $user->roles + $new_role; // Add new role to existing roles.
      user_save($user, array('roles' => $all_roles));
    }
  }
}
